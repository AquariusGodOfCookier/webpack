//https://www.webpackjs.com/concepts/ webpack 中文文档

1:什么是webpack
现在的网页功能愈发强大，可以看作是功能丰富的应用。有着很多的js功能代码与依赖包，为了简化开发，一般使用模块化开发，把复杂的程序细化；使用Scss
Less等css预处理器。
但是想要浏览器识别这些文件，需要额外处理。webpack就是负责打包这些静态模块。
本质上，webpack是一个现代js应用程序的静态模块打包器。当webpack处理应用程序时，它会递归地构建一个依赖关系图，其中包含应用程序需要的每个模块，
然后将所有这些模块打包成一个或多个bundle。
2:学习webpack，四个核心概念，先理解概念，明白是干什么的，在理解配置语法。
webpack有四个核心概念:入口，出口，loader,插件(plugins)
入口（entry）
入口起点指示webpack应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack会找出有哪些模块和库是与入口文件直接或间接依赖的。每个依赖项随即被处理，最后输出到称之为bundles的文件中。

出口(output)
出口告诉webpack在哪儿输出它所创建的bundles，以及如何命名这些文件，默认值为./dist。基本上，整个应用程序结构，都会被编译到你指定的输出路径的文件夹中。你可以通过在配置中制定一个output字段，
来配置这些处理过程。

loader
loader让webpack能够去处理哪些非JavaScript文件（webpack自身只理解js）。loader可以将所有类型的文件转换为webpack能够处理的有效模块，应该是类似node http请求中根据不同的文件后缀，写不同的
content-type吧。暂时先这么理解。

插件(plugins)
loader被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境的变量。用于扩展webpack功能。

mdoe
在webpack4中，支持的新特性就是0配置。使用mode参数可以告知webpack使用响应模式的内置优化。有三个参数，production生产模式，development开发模式，none不使用优化。
具体什么模式什么功能，现在还不懂。先跑一个简单的webpack
3:如何配置这些核心概念内容。
先配置一个最基本的webpack.config.js
const path = require('path');
module.exports = {
    entry: './src/index.js', //入口
    output: {
        //出口
        path: path.join(__dirname, './dist'),
        filename: 'bundle.js' //出口文件名
    },
    mode:'development'
}
webpack 会分析入口文件，解析包含依赖关系的各个文件。这些文件（模块）都打包到 bundle.js 。Webpack 会给每个模块分配一个唯一的 id 并通过这个 id 索引和访问模块。在页面启动时，会先执行 entry.js 中的代码，其它模块会在运行 require 的时候再执行